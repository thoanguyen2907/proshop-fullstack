{"ast":null,"code":"import axios from 'axios';\nimport { CART_ADD_ITEM, CART_REMOVE_ITEM, CART_SAVE_PAYMENT_METHOD, CART_SAVE_SHIPPING_ADDRESS } from '../constants/constants';\nexport const addToCart = (id, quantity) => {\n  return async (dispatch, getState) => {\n    try {\n      const {\n        data\n      } = await axios.get(`http://localhost:5000/api/products/${id}`);\n      dispatch({\n        type: CART_ADD_ITEM,\n        payload: {\n          product: data._id,\n          name: data.name,\n          image: data.image,\n          price: data.price,\n          countInStock: data.countInStock,\n          quantity\n        }\n      });\n      localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const removeFromCart = id => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: CART_REMOVE_ITEM,\n        payload: id\n      });\n      localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const saveShippingAddress = data => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: CART_SAVE_SHIPPING_ADDRESS,\n        payload: data\n      });\n      localStorage.setItem('shippingAddress', JSON.stringify(getState().cart.shippingAddress));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const savePaymentMethod = data => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: CART_SAVE_PAYMENT_METHOD,\n        payload: data\n      });\n      localStorage.setItem('paymentMethod', JSON.stringify(data));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};","map":{"version":3,"sources":["/Users/thoanguyen/Library/Mobile Documents/com~apple~CloudDocs/fullstack/proshop/frontend/src/redux/actions/cartAction.js"],"names":["axios","CART_ADD_ITEM","CART_REMOVE_ITEM","CART_SAVE_PAYMENT_METHOD","CART_SAVE_SHIPPING_ADDRESS","addToCart","id","quantity","dispatch","getState","data","get","type","payload","product","_id","name","image","price","countInStock","localStorage","setItem","JSON","stringify","cart","cartItems","error","console","log","removeFromCart","saveShippingAddress","shippingAddress","savePaymentMethod"],"mappings":"AAAA,OAAQA,KAAR,MAAmB,OAAnB;AACA,SAASC,aAAT,EAAwBC,gBAAxB,EAA0CC,wBAA1C,EAAoEC,0BAApE,QAAsG,wBAAtG;AAGA,OAAO,MAAMC,SAAS,GAAK,CAACC,EAAD,EAAKC,QAAL,KAAkB;AACzC,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACrC,QAAI;AAEA,YAAM;AAACC,QAAAA;AAAD,UAAS,MAAMV,KAAK,CAACW,GAAN,CAAW,sCAAqCL,EAAG,EAAnD,CAArB;AACAE,MAAAA,QAAQ,CAAC;AACLI,QAAAA,IAAI,EAAEX,aADD;AAELY,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAEJ,IAAI,CAACK,GADT;AAELC,UAAAA,IAAI,EAAEN,IAAI,CAACM,IAFN;AAGLC,UAAAA,KAAK,EAAEP,IAAI,CAACO,KAHP;AAILC,UAAAA,KAAK,EAAER,IAAI,CAACQ,KAJP;AAKLC,UAAAA,YAAY,EAAET,IAAI,CAACS,YALd;AAMLZ,UAAAA;AANK;AAFJ,OAAD,CAAR;AAWAa,MAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAed,QAAQ,GAAGe,IAAX,CAAgBC,SAA/B,CAAlC;AAEH,KAhBD,CAgBE,OAAMC,KAAN,EAAa;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACF;AACA,GApBD;AAqBH,CAtBM;AA0BP,OAAO,MAAMG,cAAc,GAAMvB,EAAD,IAAQ;AACpC,SAAO,OAAOE,QAAP,EAAiBC,QAAjB,KAA8B;AACrC,QAAI;AAEAD,MAAAA,QAAQ,CAAC;AACLI,QAAAA,IAAI,EAAEV,gBADD;AAELW,QAAAA,OAAO,EAAEP;AAFJ,OAAD,CAAR;AAIAc,MAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAed,QAAQ,GAAGe,IAAX,CAAgBC,SAA/B,CAAlC;AAEH,KARD,CAQE,OAAMC,KAAN,EAAa;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACF;AACA,GAZD;AAaH,CAdM;AAgBP,OAAO,MAAMI,mBAAmB,GAAMpB,IAAD,IAAU;AAC3C,SAAO,OAAOF,QAAP,EAAiBC,QAAjB,KAA8B;AACrC,QAAI;AAEAD,MAAAA,QAAQ,CAAC;AACLI,QAAAA,IAAI,EAAER,0BADD;AAELS,QAAAA,OAAO,EAAEH;AAFJ,OAAD,CAAR;AAIAU,MAAAA,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwCC,IAAI,CAACC,SAAL,CAAed,QAAQ,GAAGe,IAAX,CAAgBO,eAA/B,CAAxC;AAEH,KARD,CAQE,OAAML,KAAN,EAAa;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACF;AACA,GAZD;AAaH,CAdM;AAgBP,OAAO,MAAMM,iBAAiB,GAAMtB,IAAD,IAAU;AACzC,SAAO,OAAOF,QAAP,EAAiBC,QAAjB,KAA8B;AACrC,QAAI;AAEAD,MAAAA,QAAQ,CAAC;AACLI,QAAAA,IAAI,EAAET,wBADD;AAELU,QAAAA,OAAO,EAAEH;AAFJ,OAAD,CAAR;AAIAU,MAAAA,YAAY,CAACC,OAAb,CAAqB,eAArB,EAAsCC,IAAI,CAACC,SAAL,CAAeb,IAAf,CAAtC;AAEH,KARD,CAQE,OAAMgB,KAAN,EAAa;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACF;AACA,GAZD;AAaH,CAdM","sourcesContent":["import  axios from 'axios' \nimport { CART_ADD_ITEM, CART_REMOVE_ITEM, CART_SAVE_PAYMENT_METHOD, CART_SAVE_SHIPPING_ADDRESS } from '../constants/constants'\n\n\nexport const addToCart  =  (id, quantity) => {\n    return async (dispatch, getState) => {\n    try {\n       \n        const {data} = await axios.get(`http://localhost:5000/api/products/${id}`)\n        dispatch({\n            type: CART_ADD_ITEM,\n            payload: {\n                product: data._id,\n                name: data.name,\n                image: data.image, \n                price: data.price, \n                countInStock: data.countInStock,\n                quantity\n            }\n        }) \n        localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems))\n\n    } catch(error) {\n       console.log(error);\n    }\n    }\n}\n\n\n\nexport const removeFromCart  =  (id) => {\n    return async (dispatch, getState) => {\n    try { \n      \n        dispatch({\n            type: CART_REMOVE_ITEM,\n            payload: id\n        }) \n        localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems))\n\n    } catch(error) {\n       console.log(error);\n    }\n    }\n}\n\nexport const saveShippingAddress  =  (data) => {\n    return async (dispatch, getState) => {\n    try { \n      \n        dispatch({\n            type: CART_SAVE_SHIPPING_ADDRESS,\n            payload: data\n        }) \n        localStorage.setItem('shippingAddress', JSON.stringify(getState().cart.shippingAddress))\n\n    } catch(error) {\n       console.log(error);\n    }\n    }\n}\n\nexport const savePaymentMethod  =  (data) => {\n    return async (dispatch, getState) => {\n    try { \n      \n        dispatch({\n            type: CART_SAVE_PAYMENT_METHOD,\n            payload: data\n        }) \n        localStorage.setItem('paymentMethod', JSON.stringify(data))\n\n    } catch(error) {\n       console.log(error);\n    }\n    }\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}