{"ast":null,"code":"var _jsxFileName = \"/Users/thoanguyen/Library/Mobile Documents/com~apple~CloudDocs/fullstack/proshop/frontend/src/screens/UserEditScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { getUserDetails } from '../redux/actions/userAction';\nimport { USER_UPDATE_ADMIN_RESET } from '../redux/constants/constants';\nimport { history } from '../utils/history/history';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UserEditScreen(_ref) {\n  _s();\n\n  let {\n    match\n  } = _ref;\n  const userId = match.params.id;\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [isAdmin, setIsAdmin] = useState(false);\n  const dispatch = useDispatch();\n  const {\n    loading,\n    user\n  } = useSelector(state => state.userDetail);\n  const {\n    loading: loadingUpdate,\n    success: successUpdate\n  } = useSelector(state => state.userUpdateAdmin);\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch({\n        type: USER_UPDATE_ADMIN_RESET\n      });\n      history.push('/admin/users');\n    } else {\n      if (!user.name || user._id !== userId) {\n        dispatch(getUserDetails(userId));\n      } else {\n        setName(user.name);\n        setEmail(user.email);\n        setIsAdmin(user.isAdmin);\n      }\n    }\n  }, [successUpdate, dispatch, user, userId]);\n\n  const submitHandler = e => {\n    e.preventDefault();\n    const updatedData = {\n      _id: userId,\n      name,\n      email,\n      isAdmin\n    };\n    console.log('updatedData', updatedData);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NavLink, {\n      to: \"/admin/userlist\",\n      className: \"btn btn-light my-3\",\n      children: \"Go Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Edit User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), loadingUpdate && /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Loading ...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 27\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Loading ...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 10\n      }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: submitHandler,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"Your Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            name: \"name\",\n            onChange: e => setName(e.target.value),\n            value: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"Email address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            className: \"form-control\",\n            name: \"email\",\n            onChange: e => setEmail(e.target.value),\n            value: email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-check mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            className: \"form-check-input\",\n            id: \"exampleCheck1\",\n            checked: isAdmin,\n            onChange: e => setIsAdmin(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-check-label\",\n            htmlFor: \"exampleCheck1\",\n            children: \"Admin\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary\",\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 10\n  }, this);\n}\n\n_s(UserEditScreen, \"wKkXW20PUS7331f+TSyl+dyzEwc=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = UserEditScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserEditScreen\");","map":{"version":3,"sources":["/Users/thoanguyen/Library/Mobile Documents/com~apple~CloudDocs/fullstack/proshop/frontend/src/screens/UserEditScreen.js"],"names":["React","useEffect","useState","useDispatch","useSelector","NavLink","getUserDetails","USER_UPDATE_ADMIN_RESET","history","UserEditScreen","match","userId","params","id","name","setName","email","setEmail","isAdmin","setIsAdmin","dispatch","loading","user","state","userDetail","loadingUpdate","success","successUpdate","userUpdateAdmin","type","push","_id","submitHandler","e","preventDefault","updatedData","console","log","target","value","checked"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { getUserDetails } from '../redux/actions/userAction';\nimport { USER_UPDATE_ADMIN_RESET } from '../redux/constants/constants';\nimport { history } from '../utils/history/history';\n\nexport default function UserEditScreen({ match }) {\n    const userId = match.params.id\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [isAdmin, setIsAdmin] = useState(false)\n    const dispatch = useDispatch()\n\n    const  { loading, user } = useSelector((state) => state.userDetail)\n    const  { loading: loadingUpdate, success: successUpdate } = useSelector((state) => state.userUpdateAdmin)\n\n    useEffect(() => {\n       if(successUpdate) {\n           dispatch({type: USER_UPDATE_ADMIN_RESET})\n           history.push('/admin/users')\n       } else {\n           if(!user.name || user._id !== userId) {\n               dispatch(getUserDetails(userId))\n           } else {\n               setName(user.name)\n               setEmail(user.email)\n               setIsAdmin(user.isAdmin)\n           }\n       }\n    }, [successUpdate, dispatch, user, userId]);\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        const updatedData = {_id: userId, name, email, isAdmin}\n        console.log('updatedData', updatedData);\n      }\n\n  return <div>\n<NavLink to='/admin/userlist' className='btn btn-light my-3'>\n        Go Back\n      </NavLink>\n      <div className = \"container\">\n        <h1>Edit User</h1>\n        {loadingUpdate && <h1>Loading ...</h1>}\n    \n        {loading ? (\n         <h1>Loading ...</h1>\n        ) : (\n            <form onSubmit = {submitHandler}>\n\n            <div className=\"mb-3\">\n            <label className=\"form-label\">Your Name</label>\n            <input type=\"text\" className=\"form-control\" name = \"name\" onChange={(e) => setName(e.target.value)\n            }  value = {name}/>\n            </div>\n            \n            <div className=\"mb-3\">\n            <label className=\"form-label\">Email address</label>\n            <input type=\"email\" className=\"form-control\" name = \"email\" onChange={(e) => setEmail(e.target.value)}  value = {email}/>\n            </div>\n\n            <div className=\"form-check mb-3\">\n    <input type=\"checkbox\" className=\"form-check-input\" id=\"exampleCheck1\" checked= {isAdmin}      onChange={(e) => setIsAdmin(e.target.checked)}/>\n    <label className=\"form-check-label\" htmlFor=\"exampleCheck1\">Admin</label>\n  </div>\n\n            <button type=\"submit\" className=\"btn btn-primary\">Update</button>\n            </form>\n        )}\n      </div>\n\n  </div>;\n}\n"]},"metadata":{},"sourceType":"module"}